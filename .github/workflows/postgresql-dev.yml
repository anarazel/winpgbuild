on:
  workflow_dispatch:

jobs:
  build-postgresql-dev:
    strategy:
      fail-fast: false

    runs-on: windows-latest

    env:
      CCACHE_INODECACHE: 1
      CCACHE_SLOPPINESS: pch_defines, time_macros
      CCACHE_DEPEND: 1

    steps:
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Download dependencies
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: all-deps.yml
          workflow_conclusion: success
          name: all-deps-win64
          path: /builddeps
          if_no_artifact_found: fail

      # Copy libraries requires at runtime to installation directory.
      #
      # Do so before configuring / building postgres, otherwise we need to
      # duplicate knowledge about aberrant paths like "bin64".
      - name: Install Dependencies
        run: |
          mkdir \postgresql
          mkdir \postgresql\bin

          copy \builddeps\bin64\*icuuc*.dll \postgresql\bin\
          copy \builddeps\bin64\*icudt*.dll \postgresql\bin\
          copy \builddeps\bin64\*icuin*.dll \postgresql\bin\
          copy \builddeps\bin\*iconv*.dll \postgresql\bin\
          copy \builddeps\bin\*intl*.dll \postgresql\bin\
          copy \builddeps\bin\*xml2*.dll \postgresql\bin\
          copy \builddeps\bin\*xslt*.dll \postgresql\bin\
          copy \builddeps\bin\*ssl-*-x64*.dll \postgresql\bin\
          copy \builddeps\bin\*crypto-*-x64*.dll \postgresql\bin\
          copy \builddeps\bin\*lz4*.dll \postgresql\bin\
          copy \builddeps\bin\*zstd*.dll \postgresql\bin\
          copy \builddeps\bin\*zlib*.dll \postgresql\bin\

      - name: Add build deps to path
        run: |
          # so binaries and libraries can be found/run
          echo "/builddeps/bin" >> $ENV:GITHUB_PATH
          echo "/builddeps" >> $ENV:GITHUB_PATH
          echo "/postgresql/bin" >> $ENV:GITHUB_PATH

      # version in hendrikmuhs/ccache-action@v1.2.13 isn't new enough
      - name: download ccache
        run: |
          curl.exe -L -o ccache.zip 'https://github.com/ccache/ccache/releases/download/v4.10.1/ccache-4.10.1-windows-x86_64.zip'
          unzip -j ccache.zip ccache-4.10.1-windows-x86_64/ccache.exe
          mv ccache.exe C:\ProgramData\kind
          rm ccache.zip

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.13
        with:
          key: postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}
          verbose: 1

      - name: setup compiler for ccache
        run: |
          echo "CC=$(where.exe ccache) `"$(where.exe cl)`"" >> $ENV:GITHUB_ENV

      # This is run as a privileged user. For some reason windows ends up
      # creating the directories owned by "Administrator", which causes
      # problems because when postgres drops privileges, it doesn't have
      # sufficient rights to access them anymore!
      #
      # I have pulled most of my hair out over the last hours.
      #
      # See also https://www.postgresql.org/message-id/20240707064046.blgjxoqiywunbebl%40awork3.anarazel.de
      - name: Work around privilege issue
        run: |
          icacls.exe . /inheritance:e /grant 'runneradmin:(OI)(CI)F'

      # Currently required to prevent a few tests from failing
      - name: Configure git
        run: |
          git config --global core.autocrlf false

      - name: Clone Postgres
        uses: actions/checkout@v4
        with:
          repository: anarazel/postgres
          ref: winbuild
          path: postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}
          show-progress: 'false'

      - name: Configure
        run: |
          cd postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}

          # don't use \path style paths for library search, link.exe ends up
          # interpreting paths like that as flags!
          $deps = resolve-path /builddeps

          # can't enable some extra tests
          # - libpq_encryption -> fails for unknown reasons
          # - kerberos -> test not yet supported on windows
          # - load_balance -> would need to set up hostnames
          meson setup `
              --prefix=\postgresql `
              "--cmake-prefix-path=${deps}" `
              "--pkg-config-path=${deps}\lib\pkgconfig" `
              "-Dextra_include_dirs=${deps}\include" `
              "-Dextra_lib_dirs=${deps}\lib,${deps}\lib\amd64" `
              "-DPG_TEST_EXTRA=ldap ssl" `
              -Duuid=ossp `
              -Db_pch=true `
              -Dbuildtype=debugoptimized `
              -Dc_args='/Z7' `
              build

      - name: Build
        run: |
          cd postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build
          ninja

      - name: Test
        run: |
          cd postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build

          # use unix socket to prevent port conflicts
          $env:PG_TEST_USE_UNIX_SOCKETS = 1;
          # otherwise pg_regress insists on creating the directory and does it
          # in a non-existing place, this needs to be fixed :(
          mkdir d:/sockets
          $env:PG_REGRESS_SOCK_DIR = "d:/sockets/"

          meson test

      - name: Upload Test Results
        if: ${{ !success() }}
        uses: actions/upload-artifact@v4
        with:
          name: test_run
          path: |
            postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\testrun\**\*.log
            postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\testrun\**\regress_log_*
            postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\testrun\**\*.diffs
            postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\testrun\**\*.out
            postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\meson-logs\testlog.txt

      - name: Install
        run: |
          cd postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build

          meson install --quiet

      - name: Upload Source
        if: false
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: postgresql-dev-${{ vars.POSTGRESQL_DEV_VERSION }}-src
          path: postgresql-dev-${{ vars.POSTGRESQL_DEV_VERSION }}.tar.gz

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: postgresql-dev-${{ vars.POSTGRESQL_DEV_VERSION }}-win64
          path: /postgresql

      - name: Upload Meson Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: meson_log
          path: D:\a\winpgbuild\winpgbuild\postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\meson-logs\meson-log.txt
