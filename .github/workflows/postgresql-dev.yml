on:
  workflow_dispatch:

jobs:
  build-postgresql-dev:
    strategy:
      fail-fast: false

    runs-on: windows-latest
    steps:
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Download dependencies
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: all-deps.yml
          workflow_conclusion: success
          name: all-deps-win64
          path: /builddeps
          if_no_artifact_found: fail

      - name: Add build deps to path
        run: |
          # so binaries and libraries can be found/run
          echo "/builddeps/bin" >> $ENV:GITHUB_PATH
          echo "/builddeps" >> $ENV:GITHUB_PATH
          echo "/postgresql-dev/bin" >> $ENV:GITHUB_PATH

      - name: Download
        run: |
          curl https://ftp.postgresql.org/pub/source/v${{ vars.POSTGRESQL_DEV_VERSION }}/postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}.tar.gz -o ./postgresql-dev-${{ vars.POSTGRESQL_DEV_VERSION }}.tar.gz
          tar zxvf postgresql-dev-${{ vars.POSTGRESQL_DEV_VERSION }}.tar.gz

      - name: Install additional tools
        run: |
          choco install pkgconfiglite

      - name: Configure
        run: |
          cd postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}

          # don't use \path style paths for library search, link.exe ends up
          # interpreting paths like that as flags!
          $deps = resolve-path /builddeps

          # can't enable some extra tests
          # - libpq_encryption -> fails for unknown reasons
          # - kerberos -> test not yet supported on windows
          # - load_balance -> would need to set up hostnames
          meson setup `
              --prefix=\postgresql-dev `
              "--cmake-prefix-path=${deps}" `
              "--pkg-config-path=${deps}\lib\pkgconfig" `
              "-Dextra_include_dirs=${deps}\include" `
              "-Dextra_lib_dirs=${deps}\lib,${deps}\lib\amd64" `
              "-DPG_TEST_EXTRA=ldap ssl" `
              -Duuid=ossp `
              -Db_pch=true `
              -Dbuildtype=debugoptimized `
              build

      - name: Build
        run: |
          cd postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build
          ninja

      - name: Test
        run: |
          cd postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build

          # use unix socket to prevent port conflicts
          $env:PG_TEST_USE_UNIX_SOCKETS = 1;
          # otherwise pg_regress insists on creating the directory and does it
          # in a non-existing place, this needs to be fixed :(
          mkdir d:/sockets
          $env:PG_REGRESS_SOCK_DIR = "d:/sockets/"

          meson test

      - name: Upload Test Results
        if: ${{ !success() }}
        uses: actions/upload-artifact@v4
        with:
          name: test_run
          path: |
            postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\testrun\**\*.log
            postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\testrun\**\regress_log_*
            postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\testrun\**\*.diffs
            postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\testrun\**\*.out
            postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\meson-logs\testlog.txt

      - name: Install
        run: |
          cd postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build

          mkdir \postgresql
          meson install

          copy \builddeps\bin64\icuuc*.dll \postgresql\bin\
          copy \builddeps\bin64\icudt*.dll \postgresql\bin\
          copy \builddeps\bin64\icuin*.dll \postgresql\bin\
          copy \builddeps\bin\libiconv-2.dll \postgresql\bin\
          copy \builddeps\bin\libintl-8.dll \postgresql\bin\
          copy \builddeps\bin\libxml2.dll \postgresql\bin\
          copy \builddeps\bin\libxslt.dll \postgresql\bin\
          copy \builddeps\bin\libssl-*-x64.dll \postgresql\bin\
          copy \builddeps\bin\libcrypto-*-x64.dll \postgresql\bin\
          copy \builddeps\bin\liblz4.dll \postgresql\bin\
          copy \builddeps\bin\libzstd.dll \postgresql\bin\
          copy \builddeps\bin\zlib1.dll \postgresql\bin\

      - name: Upload Source
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: postgresql-dev-${{ vars.POSTGRESQL_DEV_VERSION }}-src
          path: postgresql-dev-${{ vars.POSTGRESQL_DEV_VERSION }}.tar.gz

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: postgresql-dev-${{ vars.POSTGRESQL_DEV_VERSION }}-win64
          path: /postgresql-dev

      - name: Upload Meson Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: meson_log
          path: D:\a\winpgbuild\winpgbuild\postgresql-${{ vars.POSTGRESQL_DEV_VERSION }}\build\meson-logs\meson-log.txt
